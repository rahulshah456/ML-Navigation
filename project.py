# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'refreshed.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QLabel, QApplication
from PyQt5 import QtGui
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
import imutils
from win10toast import ToastNotifier
from imutils import face_utils
from utils import *
import pyautogui as pag
import numpy as np
import dlib
import sys
import cv2
import math
import webbrowser as wb
import os


# Thresholds and consecutive frame length for triggering the mouse action.
MOUTH_AR_THRESH = 0.6
MOUTH_AR_CONSECUTIVE_FRAMES = 10
EYE_AR_THRESH = 0.19
EYE_AR_CONSECUTIVE_FRAMES = 10
WINK_AR_DIFF_THRESH = 0.04
WINK_AR_CLOSE_THRESH = 0.19
WINK_CONSECUTIVE_FRAMES = 10
ACTIVE_WINDOW_SCREEN = 0
FINGERS_ENABLED = False
FACE_ENABLED = False


# Init Dlib's face detectors and predictors
shape_predictor = "models/shape_predictor_68_face_landmarks.dat"
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(shape_predictor)



# Initial the indexes of the facial landmarks for the left and
# right eye, nose and mouth respectively
(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]
(nStart, nEnd) = face_utils.FACIAL_LANDMARKS_IDXS["nose"]
(mStart, mEnd) = face_utils.FACIAL_LANDMARKS_IDXS["mouth"]


class Thread(QThread):
    changePixmap = pyqtSignal(QImage)
    changePixmapFace = pyqtSignal(QImage)

    def update_face_video(self, rgbImage):
        # convert latest video frame to QImage format
        h, w, ch = rgbImage.shape
        bytesPerLine = ch * w
        convertToQtFormat = QImage(
            rgbImage.data, w, h, bytesPerLine, QImage.Format_RGB888)
        p = convertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
        self.changePixmap.emit(p)

    def update_fingers_video(self, rgbImage):
         # convert latest video frame to QImage format
        h, w, ch = rgbImage.shape
        bytesPerLine = ch * w
        convertToQtFormat = QImage(
            rgbImage.data, w, h, bytesPerLine, QImage.Format_RGB888)
        p = convertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
        self.changePixmapFace.emit(p)

    def face_control(self, rgbImage, frame):
        # Initialize the frame counters for each action as well as
        # booleans used to indicate if action is performed or not
        MOUTH_COUNTER = 0
        EYE_COUNTER = 0
        WINK_COUNTER = 0
        INPUT_MODE = True
        EYE_CLICK = False
        LEFT_WINK = False
        RIGHT_WINK = False
        SCROLL_MODE = False
        ANCHOR_POINT = (300, 250)
        WHITE_COLOR = (255, 255, 255)
        YELLOW_COLOR = (0, 255, 255)
        RED_COLOR = (0, 0, 255)
        GREEN_COLOR = (0, 255, 0)
        BLUE_COLOR = (255, 0, 0)
        BLACK_COLOR = (0, 0, 0)

        # Detect faces in the grayscale frame
        rects = detector(rgbImage, 0)
        

        # Loop over the face detections
        if len(rects) > 0 and FACE_ENABLED:
            rect = rects[0]

            # Determine the facial landmarks for the face region, then
            # convert the facial landmark (x, y)-coordinates to a NumPy
            # array
            shape = predictor(frame, rect)
            shape = face_utils.shape_to_np(shape)

            # Extract the left and right eye coordinates, then use the
            # coordinates to compute the eye aspect ratio for both eyes
            mouth = shape[mStart:mEnd]
            leftEye = shape[lStart:lEnd]
            rightEye = shape[rStart:rEnd]
            nose = shape[nStart:nEnd]

            # Because I flipped the frame, left is right, right is left.
            temp = leftEye
            leftEye = rightEye
            rightEye = temp

            # Average the mouth aspect ratio together for both eyes
            mar = mouth_aspect_ratio(mouth)
            leftEAR = eye_aspect_ratio(leftEye)
            rightEAR = eye_aspect_ratio(rightEye)
            ear = (leftEAR + rightEAR) / 2.0
            diff_ear = np.abs(leftEAR - rightEAR)

            nose_point = (nose[3, 0], nose[3, 1])

            # Compute the convex hull for the left and right eye, then
            # visualize each of the eyes
            mouthHull = cv2.convexHull(mouth)
            leftEyeHull = cv2.convexHull(leftEye)
            rightEyeHull = cv2.convexHull(rightEye)
            cv2.drawContours(frame, [mouthHull], -1, YELLOW_COLOR, 1)
            cv2.drawContours(frame, [leftEyeHull], -1, YELLOW_COLOR, 1)
            cv2.drawContours(frame, [rightEyeHull], -1, YELLOW_COLOR, 1)

            for (x, y) in np.concatenate((mouth, leftEye, rightEye), axis=0):
                cv2.circle(frame, (x, y), 2, GREEN_COLOR, -1)

            rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            self.update_face_video(rgbImage)
            

            #Check to see if the eye aspect ratio is below the blink
            #threshold, and if so, increment the blink frame counter
            if diff_ear > WINK_AR_DIFF_THRESH:

                if leftEAR < rightEAR:
                    if leftEAR < EYE_AR_THRESH:
                        WINK_COUNTER += 1

                        if WINK_COUNTER > WINK_CONSECUTIVE_FRAMES:
                            pag.click(button='left')

                            WINK_COUNTER = 0

                elif leftEAR > rightEAR:
                    if rightEAR < EYE_AR_THRESH:
                        WINK_COUNTER += 1

                        if WINK_COUNTER > WINK_CONSECUTIVE_FRAMES:
                            pag.click(button='right')

                            WINK_COUNTER = 0
                else:
                    WINK_COUNTER = 0
            else:
                if ear <= EYE_AR_THRESH:
                    EYE_COUNTER += 1

                    if EYE_COUNTER > EYE_AR_CONSECUTIVE_FRAMES:
                        SCROLL_MODE = not SCROLL_MODE
                        # INPUT_MODE = not INPUT_MODE
                        EYE_COUNTER = 0

                        # nose point to draw a bounding box around it

                else:
                    EYE_COUNTER = 0
                    WINK_COUNTER = 0

            if mar > MOUTH_AR_THRESH:
                print("mouth counter")
                MOUTH_COUNTER += 1

                if MOUTH_COUNTER >= MOUTH_AR_CONSECUTIVE_FRAMES:
                    # if the alarm is not on, turn it on
                    INPUT_MODE = not INPUT_MODE
                    #SCROLL_MODE = not SCROLL_MODE
                    MOUTH_COUNTER = 0
                    ANCHOR_POINT = nose_point

            else:
                MOUTH_COUNTER = 0

            if INPUT_MODE:
                cv2.putText(frame, "INPUT MODE", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, BLUE_COLOR, 2)
                x, y = ANCHOR_POINT
                nx, ny = nose_point
                w, h = 80, 80
                multiple = 1
                cv2.rectangle(frame, (x - w, y - h),
                            (x + w, y + h), GREEN_COLOR, 2)
                cv2.line(frame, ANCHOR_POINT, nose_point, BLUE_COLOR, 2)

                dir = direction(nose_point, ANCHOR_POINT, w, h)
                cv2.putText(frame, dir.upper(), (10, 90),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, BLUE_COLOR, 2)

                rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                self.update_face_video(rgbImage)  

                drag = 18
                if dir == 'right':
                    pag.moveRel(drag, 0)
                elif dir == 'left':
                    pag.moveRel(-drag, 0)
                elif dir == 'up':
                    if SCROLL_MODE:
                        pag.scroll(40)
                    else:
                        pag.moveRel(0, -drag)
                elif dir == 'down':
                    if SCROLL_MODE:
                        pag.scroll(-40)
                    else:
                        pag.moveRel(0, drag)

            if SCROLL_MODE:
                cv2.putText(frame, 'SCROLL MODE IS ON!', (10, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, BLUE_COLOR, 2)    

    def fingers_control(self, frame) :

        tabs=0
        count=0
        fingers2 = "github"
        fingers3 = "google"
        fingers4 = "tesla"

        # get hand data from the rectangle sub window on the screen
        cv2.rectangle(frame, (400,400), (100,100), (0,255,0),0)
        crop_img = frame[100:400, 100:400]

        # convert to grayscale
        grey = cv2.cvtColor(crop_img, cv2.COLOR_BGR2GRAY)

        # applying gaussian blur
        value = (35, 35)
        blurred = cv2.GaussianBlur(grey, value, 0)

        # thresholdin: Otsu's Binarization method
        _, thresh1 = cv2.threshold(blurred, 127, 255,
                                cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)

        # show thresholded image, not necessary and can be skipped
        #cv2.imshow('Thresholded', thresh1)

        # check OpenCV version to avoid unpacking error
        
        (version, _, _) = cv2.__version__.split('.')

        if version == '3':
            image, contours, hierarchy = cv2.findContours(thresh1.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
        elif version == '4':
        
            contours, hierarchy = cv2.findContours(thresh1.copy(),cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

        # find contour with max area
        cnt = max(contours, key = lambda x: cv2.contourArea(x))

        # create bounding rectangle around the contour (can skip below two lines)
        x, y, w, h = cv2.boundingRect(cnt)
        cv2.rectangle(crop_img, (x, y), (x+w, y+h), (0, 0, 255), 0)

        # finding convex hull
        hull = cv2.convexHull(cnt)

        # drawing contours
        drawing = np.zeros(crop_img.shape,np.uint8)
        cv2.drawContours(drawing, [cnt], 0, (0, 255, 0), 0)
        cv2.drawContours(drawing, [hull], 0,(0, 0, 255), 0)

        # finding convex hull
        hull = cv2.convexHull(cnt, returnPoints=False)#  return point false to find convexity defects

        # finding convexity defects
        defects = cv2.convexityDefects(cnt, hull)
        count_defects = 0
        cv2.drawContours(thresh1, contours, -1, (0, 255, 0), 3)# to draw all contours pass -1

        # applying Cosine Rule to find angle for all defects (between fingers)
        # with angle > 90 degrees and ignore defects
        for i in range(defects.shape[0]):
            s,e,f,d = defects[i,0] #[ start point, end point, farthest point, approximate distance to farthest point ]

            start = tuple(cnt[s][0])
            end = tuple(cnt[e][0])
            far = tuple(cnt[f][0])

            # find length of all sides of triangle
            a = math.sqrt((end[0] - start[0])**2 + (end[1] - start[1])**2)
            b = math.sqrt((far[0] - start[0])**2 + (far[1] - start[1])**2)
            c = math.sqrt((end[0] - far[0])**2 + (end[1] - far[1])**2)

            # apply cosine rule here
            angle = math.acos((b**2 + c**2 - a**2)/(2*b*c)) * 57

            # ignore angles > 90 and highlight rest with red dots
            if angle <= 90:
                count_defects += 1
                cv2.circle(crop_img, far, 1, [0,0,255], -1)
            #dist = cv2.pointPolygonTest(cnt,far,True)

            # draw a line from start to end i.e. the convex points (finger tips)
            # (can skip this part)
            cv2.line(crop_img,start, end, [0,255,0], 2)
            #cv2.circle(crop_img,far,5,[0,0,255],-1)
        if count==0:
            cv2.putText(frame,"Wait for it :p", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 3, 3)

        if FINGERS_ENABLED:
            # define actions required
            if count_defects == 1 and count!=2 and tabs<=8:
                wb.open_new_tab('http://www.'+fingers2+'.com')
                tabs=tabs+1
                cv2.putText(frame,"2."+fingers2, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 3, (255,0,0), 3)
                count=2    
            elif count_defects == 2 and count!=3 and tabs<=8:
                wb.open_new_tab('http://www.'+fingers3+'.com')
                tabs=tabs+1
                cv2.putText(frame, "3."+fingers3, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 3, (0,0,255), 3)
                count=3
            elif count_defects == 3 and count!=4 and tabs<=8:
                wb.open_new_tab('http://www.'+fingers4+'.com')
                cv2.putText(frame, "4."+fingers4, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 3, (255,165,0), 3)
                tabs=tabs+1
                count=4
            elif count_defects == 4 and count!=5:
                cv2.putText(frame,"5.Close Web browser", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 3, 3)
                os.system("taskkill /im chrome.exe /f")
                tabs=0
                count=5
            else:
                cv2.putText(frame,"", (50, 100),\
                            cv2.FONT_HERSHEY_SIMPLEX, 3, 3)
                
            if count==2:
                cv2.putText(frame, "2."+fingers2, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 3, (255,0,0), 3)
            elif count==3:
                cv2.putText(frame, "3."+fingers3, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 3, (0,0,255), 3)
            elif count==4:
                cv2.putText(frame, "4."+fingers4, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 3, (255,165,0), 3)
            elif count==5:
                cv2.putText(frame, "5.WebBrowser close", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 3, 3)

            rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            self.update_fingers_video(rgbImage)  
    
    def run(self):
        cap = cv2.VideoCapture(0)
        while True:
            ret, frame = cap.read()
            if ret:
                # convert latest video frame to RGB
                rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                # calling face control functions
                self.update_face_video(rgbImage)
                self.face_control(rgbImage, frame)

                 # calling face control functions
                self.update_fingers_video(rgbImage)
                self.fingers_control(frame)



class Ui_MainWindow(QWidget):

    def fingers_toggle(self):
        global FINGERS_ENABLED
        toaster = ToastNotifier()
        if FINGERS_ENABLED:
            FINGERS_ENABLED = False
            toaster.show_toast("Feature Disabled","Face Navigation is disabled for now!")
        else:
            FINGERS_ENABLED = True
            toaster.show_toast("Feature Enabled","Face Navigation is working now!")
    
    def face_toggle(self):
        global FACE_ENABLED
        if FACE_ENABLED:
            FACE_ENABLED = False
        else:
            FACE_ENABLED = True
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(817, 518)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.nav_frame = QtWidgets.QFrame(self.centralwidget)
        self.nav_frame.setGeometry(QtCore.QRect(0, 0, 211, 521))
        self.nav_frame.setStyleSheet("QFrame {\n"
        "    background-color: #222831;\n"
        "}\n"
        "\n"
        "QPushButton {\n"
        "    padding: 10px 10px;\n"
        "    margin-bottom: 10px;\n"
        "    color: rgb(255, 255, 255);\n"
        "    border: none;\n"
        "    background-color: rgb(72, 72, 72);\n"
        "}\n"
        "\n"
        "QPushButton:hover,QPushButton:focus {\n"
        "    border-left: 3px solid #f05454;\n"
        "    background-color: rgb(100, 100, 100);\n"
        "}\n"
        "\n"
        "")
        self.nav_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.nav_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.nav_frame.setObjectName("nav_frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.nav_frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.header_frame = QtWidgets.QFrame(self.nav_frame)
        self.header_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.header_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.header_frame.setObjectName("header_frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.header_frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_nav_header = QtWidgets.QLabel(self.header_frame)
        font = QtGui.QFont()
        font.setFamily("Microsoft Sans Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_nav_header.setFont(font)
        self.label_nav_header.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_nav_header.setWordWrap(True)
        self.label_nav_header.setObjectName("label_nav_header")
        self.verticalLayout.addWidget(self.label_nav_header)
        self.verticalLayout_2.addWidget(self.header_frame)
        self.menu_frame = QtWidgets.QFrame(self.nav_frame)
        self.menu_frame.setStyleSheet("")
        self.menu_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.menu_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.menu_frame.setObjectName("menu_frame")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.menu_frame)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.face_button = QtWidgets.QPushButton(self.menu_frame)
        self.face_button.setObjectName("face_button")
        self.verticalLayout_4.addWidget(self.face_button)
        self.fingers_button = QtWidgets.QPushButton(self.menu_frame)
        self.fingers_button.setObjectName("fingers_button")
        self.verticalLayout_4.addWidget(self.fingers_button)
        self.gesture_button = QtWidgets.QPushButton(self.menu_frame)
        self.gesture_button.setObjectName("gesture_button")
        self.verticalLayout_4.addWidget(self.gesture_button)
        self.voice_button = QtWidgets.QPushButton(self.menu_frame)
        self.voice_button.setObjectName("voice_button")
        self.verticalLayout_4.addWidget(self.voice_button)
        self.verticalLayout_2.addWidget(self.menu_frame)
        self.bottom_frame = QtWidgets.QFrame(self.nav_frame)
        self.bottom_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bottom_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bottom_frame.setObjectName("bottom_frame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.bottom_frame)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.settings_button = QtWidgets.QPushButton(self.bottom_frame)
        self.settings_button.setStyleSheet("padding: 10px;")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("res/settings.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.settings_button.setIcon(icon)
        self.settings_button.setIconSize(QtCore.QSize(16, 16))
        self.settings_button.setAutoExclusive(False)
        self.settings_button.setAutoDefault(False)
        self.settings_button.setDefault(False)
        self.settings_button.setFlat(False)
        self.settings_button.setObjectName("settings_button")
        self.verticalLayout_3.addWidget(self.settings_button)
        self.verticalLayout_2.addWidget(self.bottom_frame, 0, QtCore.Qt.AlignBottom)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(209, -1, 611, 521))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame)
        self.stackedWidget.setGeometry(QtCore.QRect(-1, -1, 611, 521))
        self.stackedWidget.setStyleSheet("background-color: #dddddd;")
        self.stackedWidget.setObjectName("stackedWidget")
        self.face_page = QtWidgets.QWidget()
        self.face_page.setStyleSheet("")
        self.face_page.setObjectName("face_page")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.face_page)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.video_label_face = QtWidgets.QLabel(self.face_page)
        self.video_label_face.setStyleSheet("background-color:#222831;")
        self.video_label_face.setText("")
        self.video_label_face.setObjectName("video_label_face")
        self.verticalLayout_6.addWidget(self.video_label_face)
        self.frame_3 = QtWidgets.QFrame(self.face_page)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_5 = QtWidgets.QFrame(self.frame_3)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.label_7 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_10.addWidget(self.label_7)
        self.lmb_checkbox = QtWidgets.QCheckBox(self.frame_5)
        self.lmb_checkbox.setObjectName("lmb_checkbox")
        self.verticalLayout_10.addWidget(self.lmb_checkbox)
        self.rbm_checkbox = QtWidgets.QCheckBox(self.frame_5)
        self.rbm_checkbox.setObjectName("rbm_checkbox")
        self.verticalLayout_10.addWidget(self.rbm_checkbox)
        self.head_checkbox = QtWidgets.QCheckBox(self.frame_5)
        self.head_checkbox.setObjectName("head_checkbox")
        self.verticalLayout_10.addWidget(self.head_checkbox)
        self.mouth_checkbox = QtWidgets.QCheckBox(self.frame_5)
        self.mouth_checkbox.setObjectName("mouth_checkbox")
        self.verticalLayout_10.addWidget(self.mouth_checkbox)
        self.horizontalLayout.addWidget(self.frame_5, 0, QtCore.Qt.AlignTop)
        self.frame_4 = QtWidgets.QFrame(self.frame_3)
        self.frame_4.setStyleSheet("QPushButton {\n"
        "    padding: 10px 10px;\n"
        "    color: rgb(255, 255, 255);\n"
        "    border: none;\n"
        "    background-color: rgb(72, 72, 72);\n"
        "}\n"
        "\n"
        "QPushButton:hover,QPushButton:focus {\n"
        "    border-bottom: 3px solid #f05454;\n"
        "    background-color: rgb(100, 100, 100);\n"
        "}")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.detect_button = QtWidgets.QPushButton(self.frame_4)
        self.detect_button.setObjectName("detect_button")
        self.horizontalLayout_2.addWidget(self.detect_button)
        self.enable_button = QtWidgets.QPushButton(self.frame_4)
        self.enable_button.setObjectName("enable_button")
        self.horizontalLayout_2.addWidget(self.enable_button)
        self.enable_button.clicked.connect(self.face_toggle)


        self.horizontalLayout.addWidget(self.frame_4, 0, QtCore.Qt.AlignBottom)
        self.verticalLayout_6.addWidget(self.frame_3)
        self.stackedWidget.addWidget(self.face_page)
        self.hand_page = QtWidgets.QWidget()
        self.hand_page.setObjectName("hand_page")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.hand_page)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.video_label_fingers = QtWidgets.QLabel(self.hand_page)
        self.video_label_fingers.setStyleSheet("background-color:#222831;")
        self.video_label_fingers.setText("")
        self.video_label_fingers.setObjectName("video_label_fingers")
        self.verticalLayout_7.addWidget(self.video_label_fingers)
        self.frame_10 = QtWidgets.QFrame(self.hand_page)
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_10)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.frame_13 = QtWidgets.QFrame(self.frame_10)
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.frame_13)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.label_11 = QtWidgets.QLabel(self.frame_13)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_14.addWidget(self.label_11)
        self.frame_16 = QtWidgets.QFrame(self.frame_13)
        self.frame_16.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_16.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_16.setObjectName("frame_16")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_16)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_12 = QtWidgets.QLabel(self.frame_16)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_7.addWidget(self.label_12)
        self.text_box_1 = QtWidgets.QLineEdit(self.frame_16)
        self.text_box_1.setObjectName("text_box_1")
        self.horizontalLayout_7.addWidget(self.text_box_1)
        self.verticalLayout_14.addWidget(self.frame_16)
        self.frame_17 = QtWidgets.QFrame(self.frame_13)
        self.frame_17.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_17.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_17.setObjectName("frame_17")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_17)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_13 = QtWidgets.QLabel(self.frame_17)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_3.addWidget(self.label_13)
        self.text_box_2 = QtWidgets.QLineEdit(self.frame_17)
        self.text_box_2.setObjectName("text_box_2")
        self.horizontalLayout_3.addWidget(self.text_box_2)
        self.verticalLayout_14.addWidget(self.frame_17)
        self.frame_18 = QtWidgets.QFrame(self.frame_13)
        self.frame_18.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_18.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_18.setObjectName("frame_18")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_18)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_14 = QtWidgets.QLabel(self.frame_18)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_4.addWidget(self.label_14)
        self.text_box_3 = QtWidgets.QLineEdit(self.frame_18)
        self.text_box_3.setObjectName("text_box_3")
        self.horizontalLayout_4.addWidget(self.text_box_3)
        self.verticalLayout_14.addWidget(self.frame_18)
        self.frame_19 = QtWidgets.QFrame(self.frame_13)
        self.frame_19.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_19.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_19.setObjectName("frame_19")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_19)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_15 = QtWidgets.QLabel(self.frame_19)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_8.addWidget(self.label_15)
        self.text_box_4 = QtWidgets.QLineEdit(self.frame_19)
        self.text_box_4.setObjectName("text_box_4")
        self.horizontalLayout_8.addWidget(self.text_box_4)
        self.verticalLayout_14.addWidget(self.frame_19)
        self.horizontalLayout_5.addWidget(self.frame_13, 0, QtCore.Qt.AlignTop)
        self.frame_14 = QtWidgets.QFrame(self.frame_10)
        self.frame_14.setStyleSheet("QPushButton {\n"
        "    padding: 10px 10px;\n"
        "    color: rgb(255, 255, 255);\n"
        "    border: none;\n"
        "    background-color: rgb(72, 72, 72);\n"
        "    transition: 0.2s;\n"
        "}\n"
        "\n"
        "QPushButton:hover,QPushButton:focus {\n"
        "    border-bottom: 3px solid #f05454;\n"
        "    background-color: rgb(100, 100, 100);\n"
        "}")
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_14)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.detect_button_2 = QtWidgets.QPushButton(self.frame_14)
        self.detect_button_2.setObjectName("detect_button_2")
        self.horizontalLayout_6.addWidget(self.detect_button_2)
        self.enable_button_2 = QtWidgets.QPushButton(self.frame_14)
        self.enable_button_2.setObjectName("enable_button_2")
        self.horizontalLayout_6.addWidget(self.enable_button_2)
        self.enable_button_2.clicked.connect(self.fingers_toggle)

        self.horizontalLayout_5.addWidget(self.frame_14, 0, QtCore.Qt.AlignBottom)
        self.verticalLayout_7.addWidget(self.frame_10)
        self.stackedWidget.addWidget(self.hand_page)
        self.gestures_page = QtWidgets.QWidget()
        self.gestures_page.setObjectName("gestures_page")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.gestures_page)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_3 = QtWidgets.QLabel(self.gestures_page)
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setWordWrap(True)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_8.addWidget(self.label_3, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.stackedWidget.addWidget(self.gestures_page)
        self.voice_page = QtWidgets.QWidget()
        self.voice_page.setObjectName("voice_page")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.voice_page)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.label_4 = QtWidgets.QLabel(self.voice_page)
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setWordWrap(True)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_9.addWidget(self.label_4, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.stackedWidget.addWidget(self.voice_page)
        self.settings_page = QtWidgets.QWidget()
        self.settings_page.setStyleSheet("")
        self.settings_page.setObjectName("settings_page")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.settings_page)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame_6 = QtWidgets.QFrame(self.settings_page)
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.frame_6)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.frame_8 = QtWidgets.QFrame(self.frame_6)
        self.frame_8.setStyleSheet("background-color: #222831;\n"
        "color: rgb(255, 255, 255);")
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.frame_8)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.label_5 = QtWidgets.QLabel(self.frame_8)
        font = QtGui.QFont()
        font.setPointSize(50)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("")
        self.label_5.setObjectName("label_5")
        self.verticalLayout_12.addWidget(self.label_5)
        self.label_8 = QtWidgets.QLabel(self.frame_8)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_12.addWidget(self.label_8)
        self.verticalLayout_11.addWidget(self.frame_8, 0, QtCore.Qt.AlignTop)
        self.frame_7 = QtWidgets.QFrame(self.frame_6)
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.label_9 = QtWidgets.QLabel(self.frame_7)
        self.label_9.setGeometry(QtCore.QRect(110, 60, 367, 104))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setWordWrap(True)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_11.addWidget(self.frame_7)
        self.verticalLayout_5.addWidget(self.frame_6)
        self.stackedWidget.addWidget(self.settings_page)
        MainWindow.setCentralWidget(self.centralwidget)


        #subscribe the threads
        th = Thread(MainWindow)
        th.changePixmap.connect(self.setImage)
        th.start()

        #subscribe the threads
        th = Thread(MainWindow)
        th.changePixmapFace.connect(self.setFingersImage)
        th.start()

        self.stackedWidget.setCurrentWidget(self.face_page)

        # self.face_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.face_page))
        # self.fingers_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.hand_page))
        # self.gesture_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.gestures_page))
        # self.voice_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.voice_page))
        # self.settings_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.settings_page))

        self.face_button.clicked.connect(lambda: self.changeScreen(self.stackedWidget, 0))
        self.fingers_button.clicked.connect(lambda: self.changeScreen(self.stackedWidget, 1))
        self.gesture_button.clicked.connect(lambda: self.changeScreen(self.stackedWidget, 2))
        self.voice_button.clicked.connect(lambda: self.changeScreen(self.stackedWidget, 3))
        self.settings_button.clicked.connect(lambda: self.changeScreen(self.stackedWidget, 4))

        self.retranslateUi(MainWindow)
        # self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def changeScreen(self, stackedWidget, index):
        stackedWidget.setCurrentIndex(index)
        ACTIVE_WINDOW_SCREEN = index
    
    @pyqtSlot(QImage)
    def setImage(self, image):
        # update video frame as image to the window
        self.video_label_face.setPixmap(QPixmap.fromImage(image))

    @pyqtSlot(QImage)
    def setFingersImage(self, image):
        # update video frame as image to the window
        self.video_label_fingers.setPixmap(QPixmap.fromImage(image))
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_nav_header.setText(_translate("MainWindow", "SELECT YOUR NAVIGATION OPTION"))
        self.face_button.setText(_translate("MainWindow", "Face Navigation"))
        self.fingers_button.setText(_translate("MainWindow", "Hand Fingers"))
        self.gesture_button.setText(_translate("MainWindow", "Hand Gestures"))
        self.voice_button.setText(_translate("MainWindow", "Voice Navigation"))
        self.settings_button.setText(_translate("MainWindow", "Settings"))
        self.label_7.setText(_translate("MainWindow", "Check to enable features"))
        self.lmb_checkbox.setText(_translate("MainWindow", "Left Eye Blink to Left Click"))
        self.rbm_checkbox.setText(_translate("MainWindow", "Right Eye Blink to Right Click"))
        self.head_checkbox.setText(_translate("MainWindow", "Move Head to Move Mouse Pointer"))
        self.mouth_checkbox.setText(_translate("MainWindow", "Mouth Open to Scoll"))
        self.detect_button.setText(_translate("MainWindow", "Detect Camera"))
        self.enable_button.setText(_translate("MainWindow", "Save / Enable"))
        self.label_11.setText(_translate("MainWindow", "Add new Websites to open on detection"))
        self.label_12.setText(_translate("MainWindow", "1 Finger Detected"))
        self.label_13.setText(_translate("MainWindow", "2 Finger Detected"))
        self.label_14.setText(_translate("MainWindow", "3 Finger Detected"))
        self.label_15.setText(_translate("MainWindow", "4 Finger Detected"))
        self.detect_button_2.setText(_translate("MainWindow", "Detect Camera"))
        self.enable_button_2.setText(_translate("MainWindow", "Save / Enable"))
        self.label_3.setText(_translate("MainWindow", "Hand Gestures Page"))
        self.label_4.setText(_translate("MainWindow", "Voice Navigation Page"))
        self.label_5.setText(_translate("MainWindow", "ML Navigation"))
        self.label_8.setText(_translate("MainWindow", "Version: 0.1.beta"))
        self.label_9.setText(_translate("MainWindow", "Settings Page"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
